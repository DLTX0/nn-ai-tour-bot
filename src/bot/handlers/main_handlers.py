import re

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    ReplyKeyboardRemove
)

from src.bot.states.main_states import MainForm
from src.llm import request
from src.bot.utils.check_correct import is_valid_time, is_valid_location
from src.bot.utils.correction import correction_location
from src.bot.keyboards.user_keyboards import main_keyboard, location_keyboard

router = Router()

# /start
@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üëã\n–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä—ë–º –ø—Ä–æ–≥—É–ª–∫—É!\n\n1Ô∏è‚É£ –ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∏—Å—Ç–æ—Ä–∏—è, —Å—Ç—Ä–∏—Ç-–∞—Ä—Ç, –∫–æ—Ñ–µ–π–Ω–∏)",
        reply_markup=main_keyboard
    )
    await state.set_state(MainForm.INTERESTS)


# –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
@router.message(F.text == "–ü–æ–º–æ–≥–∏ –ø–∂ —Å –¥–æ–Ω–∞—à–∫–æ–π..")
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å üòÄ\n–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä—ë–º –ø—Ä–æ–≥—É–ª–∫—É!\n\n1Ô∏è‚É£ –ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∏—Å—Ç–æ—Ä–∏—è, —Å—Ç—Ä–∏—Ç-–∞—Ä—Ç, –∫–æ—Ñ–µ–π–Ω–∏)",
        reply_markup=main_keyboard
    )
    await state.set_state(MainForm.INTERESTS)


# –®–∞–≥ 1 ‚Äî –∏–Ω—Ç–µ—Ä–µ—Å—ã
@router.message(MainForm.INTERESTS)
async def process_interests(message: Message, state: FSMContext):
    await state.update_data(interests=message.text)
    await message.answer("‚è∞ –°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É? (–≤ —á–∞—Å–∞—Ö)")
    await state.set_state(MainForm.TIME)


# –®–∞–≥ 2 ‚Äî –≤—Ä–µ–º—è
@router.message(MainForm.TIME)
async def process_time(message: Message, state: FSMContext):
    if not is_valid_time(message.text):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
        return

    await state.update_data(time=message.text)

    await message.answer(
        "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é:",
        reply_markup=location_keyboard
    )
    await state.set_state(MainForm.LOCATION)


# –®–∞–≥ 3 ‚Äî –ª–æ–∫–∞—Ü–∏—è (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞)
@router.message(MainForm.LOCATION, F.location)
async def process_location_geo(message: Message, state: FSMContext):
    loc = message.location
    coords = f"{loc.latitude}, {loc.longitude}"
    await state.update_data(location=coords)

    data = await state.get_data()
    await send_summary(message, data)


@router.message(MainForm.LOCATION)
async def process_location_text(message: Message, state: FSMContext):
    if not await is_valid_location(message.text):
        await message.answer("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å")
        return

    from src.yandex_api import get_coordinates
    coords = await get_coordinates(correction_location(message.text))

    await state.update_data(location=f"{coords[0]}, {coords[1]}")
    data = await state.get_data()
    await send_summary(message, data)


# –ò—Ç–æ–≥
async def send_summary(message: Message, data: dict):
    interests = data.get("interests")
    time = data.get("time")
    location = data.get("location")

    await request()

    await message.answer(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"‚ú® –ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests}\n"
        f"‚è∞ –í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É: {time} —á–∞—Å–æ–≤\n"
        f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}",
        reply_markup=main_keyboard
    )



