import asyncio
import logging
import sys
from os import getenv

from llm import request
from src.bot.states.main_states import MainForm

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
load_dotenv()
TOKEN = getenv("BOT_TOKEN")

dp = Dispatcher(storage=MemoryStorage())


# /start
@dp.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üëã\n–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä—ë–º –ø—Ä–æ–≥—É–ª–∫—É!\n\n1Ô∏è‚É£ –ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∏—Å—Ç–æ—Ä–∏—è, —Å—Ç—Ä–∏—Ç-–∞—Ä—Ç, –∫–æ—Ñ–µ–π–Ω–∏)"
    )
    await state.set_state(MainForm.INTERESTS)


# –®–∞–≥ 1 ‚Äî –∏–Ω—Ç–µ—Ä–µ—Å—ã
@dp.message(MainForm.INTERESTS)
async def process_interests(message: Message, state: FSMContext):
    await state.update_data(interests=message.text)
    await message.answer("‚è∞ –°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É? (–≤ —á–∞—Å–∞—Ö)")
    await state.set_state(MainForm.TIME)


# –®–∞–≥ 2 ‚Äî –≤—Ä–µ–º—è
@dp.message(MainForm.TIME)
async def process_time(message: Message, state: FSMContext):
    await state.update_data(time=message.text)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
    location_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é:",
        reply_markup=location_keyboard
    )
    await state.set_state(MainForm.LOCATION)


# –®–∞–≥ 3 ‚Äî –ª–æ–∫–∞—Ü–∏—è (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞)
@dp.message(MainForm.LOCATION, F.location)
async def process_location_geo(message: Message, state: FSMContext):
    loc = message.location
    coords = f"{loc.latitude}, {loc.longitude}"
    await state.update_data(location=coords)

    data = await state.get_data()
    await send_summary(message, data)


@dp.message(MainForm.LOCATION)
async def process_location_text(message: Message, state: FSMContext):
    await state.update_data(location=message.text)
    data = await state.get_data()
    await send_summary(message, data)


# –ò—Ç–æ–≥
async def send_summary(message: Message, data: dict):
    interests = data.get("interests")
    time = data.get("time")
    location = data.get("location")

    request()

    await message.answer(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"‚ú® –ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests}\n"
        f"‚è∞ –í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É: {time} —á–∞—Å–æ–≤\n"
        f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}",
        reply_markup=ReplyKeyboardRemove()
    )


async def main():
    bot = Bot(
        token=TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
